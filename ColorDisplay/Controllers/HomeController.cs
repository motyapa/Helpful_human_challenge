using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using ColorDisplay.Models;
using System.Data.SqlClient;

namespace ColorDisplay.Controllers
{
    public class HomeController : Controller
    {        
        private static double _tintMultiplier = .5; 
        private static double _shadeMultiplier = .75;
        //NOTE - Typically I would never hardcode anything with a username + password in code (I would retrieve these with say an azure keyvault or something)
        //But for the purposes of this challenege I will do this for simplicity's sake, this is a temporary DB generated by the hosting service, and the fact that I doubt the person reviewing this challenge will mess with it.
        private string _connectionString = "Data Source=sql5101.site4now.net;Initial Catalog=db_a76c0c_hhchallengedb;Persist Security Info=True;User ID=db_a76c0c_hhchallengedb_admin;Password=helpfulhuman1";

        public ActionResult Index()
        {
            //Only use the data we need
            //Since we only use 12 elements at a time, the first time we need to know how many pages are necessary we need a count of ALL colors generated. 
            var total = getDBTotal();
            IndexViewModel data = new IndexViewModel(getDBColors(1), total);
            return View(data);
        }     

        //Given a pagenumber, return the 12 (# of elements displayed) relevent to that page
        [HttpGet]
        public ActionResult Colors(int pageNumber)
        {                    
            return PartialView("_ColorGrid", getDBColors(pageNumber));
        }

        //For the details page, pass through the rgb values of the swatch selected
        //Also used for when the user hits random, then rgb values are -1.
        [HttpGet]
        public ActionResult Details(int red, int green, int blue)
        {
            List<ColorModel> details = new List<ColorModel>();
            ColorModel original = new ColorModel(red, green, blue);

            //Random button pressed
            if (red == -1)
            {
                original = getDBRandomColor();
            }

            //shade the elements, add at the start of list
            for (int i = 2; i >= 1; i--)
            {
                double multiplier = Math.Pow(_shadeMultiplier, i);
                details.Add(new ColorModel(Convert.ToInt32(original.red * multiplier), Convert.ToInt32(original.green * multiplier), Convert.ToInt32(original.blue * multiplier)));
            }

            //Add originally selected color
            details.Add(original);

            //Tint the elements, add at end
            double lastR = original.red;
            double lastG = original.green;
            double lastB = original.blue;          
            for (int i = 1; i <= 2; i++)
            {
                lastR = lastR + (255 - lastR) * _tintMultiplier;
                lastG = lastG + (255 - lastG) * _tintMultiplier;
                lastB = lastB + (255 - lastB) * _tintMultiplier;
                details.Add(new ColorModel(Convert.ToInt32(lastR), Convert.ToInt32(lastG), Convert.ToInt32(lastB)));
            }      
            
            //The reason for going from darkest -> lightest is due to the way the tinting works. Since it relies on the previous value, it was simpler to make a list going from darkest to lightest.           
            return PartialView("_Details", details);
        }

        //Database related methods
        //Gets the 12 relevant colors to whatever page
        public List<ColorModel> getDBColors(int pageNumber)
        {
            List<ColorModel> colors = new List<ColorModel>();
            using (SqlConnection con = new SqlConnection(_connectionString))
            {
                con.Open();
                SqlCommand command = new SqlCommand();
                command.CommandText = "SELECT * from dbo.Colors ORDER BY Sno OFFSET (@pageNumber-1) * 12 ROWS FETCH NEXT 12 ROWS ONLY;"; //Also works if remaining rows <12
                command.Parameters.Add("@pageNumber", System.Data.SqlDbType.Int).Value = pageNumber; //This prevents SQL injections
                command.Connection = con;
                SqlDataReader reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        colors.Add(new ColorModel(reader.GetInt32(1), reader.GetInt32(2), reader.GetInt32(3), reader.GetString(4)));
                    }
                }
                else
                {
                    Console.WriteLine("No rows found.");
                }
                reader.Close();
                con.Close();
            }
            return colors;
        }

        //Get a random entry in the database.
        public ColorModel getDBRandomColor()
        {
            ColorModel color = new ColorModel(0, 0, 0);
            using (SqlConnection con = new SqlConnection(_connectionString))
            {
                con.Open();
                SqlCommand command = new SqlCommand();
                command.CommandText = "SELECT TOP 1 * FROM dbo.Colors ORDER BY NEWID();";
                command.Connection = con;
                SqlDataReader reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        color = new ColorModel(reader.GetInt32(1), reader.GetInt32(2), reader.GetInt32(3), reader.GetString(4));
                    }
                }
                else
                {
                    Console.WriteLine("No rows found.");
                }
                reader.Close();
                con.Close();
            }
            return color;
        }

        public int getDBTotal()
        {
            int count = 0;
            using (SqlConnection con = new SqlConnection(_connectionString))
            {
                con.Open();
                SqlCommand command = new SqlCommand();
                command.CommandText = "SELECT COUNT(*) from dbo.Colors;";
                command.Connection = con;
                SqlDataReader reader = command.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        count = reader.GetInt32(0);
                    }
                }
                else
                {
                    Console.WriteLine("No rows found.");
                }
                reader.Close();
                con.Close();
            }
            return count;
        }

        //Generate rgb colors script. Added these to my DB manually from the JSON file generated.
        //Using this handy tool - https://www.convertjson.com/json-to-sql.htm
        public static void generateValues()
        {
            List<ColorModel> colors = new List<ColorModel>();
            int RGBStep = 32; //The difference in RGB values
            string pathToData = Path.Combine(Environment.CurrentDirectory, RGBStep + "RGBValues.json");
            if (!System.IO.File.Exists(pathToData))
            {
                using (StreamWriter sw = new StreamWriter(pathToData))
                {
                    int loopValue = 256 / RGBStep;
                    for (int blue = 0; blue <= loopValue; blue++)
                    {
                        for (int green = 0; green <= loopValue; green++)
                        {
                            for (int red = 0; red <= loopValue; red++)
                            {
                                ColorModel cm = new ColorModel(red * RGBStep - 1, green * RGBStep - 1, blue * RGBStep - 1);


                                colors.Add(cm);
                            }
                        }
                    }
                    //Shuffle using the step as a seed - garauntees each time that the order of colors will be the same if the data is lost for whatever reason
                    Shuffle(colors, RGBStep);
                    var allData = JsonConvert.SerializeObject(colors, Formatting.Indented);
                    sw.Write(allData);
                }
            }
        }
        //Shuffle the colors list given a seed.
        public static void Shuffle<T>(IList<T> list, int seed)
        {
            var rng = new Random(seed);
            int n = list.Count;

            while (n > 1)
            {
                n--;
                int k = rng.Next(n + 1);
                T value = list[k];
                list[k] = list[n];
                list[n] = value;
            }
        }
    }
}
